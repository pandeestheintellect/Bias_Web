@model BuildInspect.Models.ViewModel.AssessmentProjectMasterViewModel

@{
    Layout = null;
    var cells = 4;
    int i = 0;
}

<!-- Breadcrumb-->
<div class="row pt-2 pb-2">
    <div class="col-sm-9">
        <h4 class="page-title">Project Creation</h4>
        <ol class="breadcrumb">
            <li class="breadcrumb-item">Masters</li>
            <li class="breadcrumb-item"><a href="#" class="AssessmentProjectIndex">Project List</a></li>
            <li class="breadcrumb-item active" aria-current="page">Project Creation</li>
        </ol>
    </div>
</div>
<!-- End Breadcrumb-->

@using (Html.BeginForm(null, null, FormMethod.Post, new { id = "ProjectCreateForm", @class = "form-horizontal" }))
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    @Html.HiddenFor(model => model.Assessors)
    @Html.HiddenFor(model => model.Is_ExternalWallApplicable)
    @Html.HiddenFor(model => model.Is_ExternalWorksApplicable)
    @Html.HiddenFor(model => model.Is_RoofApplicable)
    @Html.HiddenFor(model => model.Is_FieldWindowWTTApplicable)
    @Html.HiddenFor(model => model.Is_WetAreaWTTApplicable)
    @Html.HiddenFor(model => model.Is_Completed)
    <div>&nbsp;</div>
    <div class="row">
        <div class="col-lg-12">
            <div class="card">
                <div class="card-body">
                    <h4 class="form-header text-uppercase">
                        <i class="fa fa-user-circle-o"></i>
                        Project Info
                    </h4>
                    <div class="row">
                        <div class="col-xl-12">
                            <div class="row form-group">
                                <label for="projectname" class="col-sm-12 col-md-6 col-xl-3 control-label">Project name<span class="symbol required"></span></label>
                                <div class="col-sm-12 col-md-6 col-xl-9">
                                    @Html.EditorFor(model => model.Project_Name, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.Project_Name, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="row form-group">
                                <label for="firstname" class="col-sm-12 col-md-6 col-xl-3 control-label">Project ID<span class="symbol required"></span></label>
                                <div class="col-sm-12 col-md-6 col-xl-9">
                                    @Html.EditorFor(model => model.Project_ID, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.Project_ID, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="row form-group">
                                <label for="firstname" class="col-sm-12 col-md-6 col-xl-3 control-label">Doc No</label>
                                <div class="col-sm-12 col-md-6 col-xl-9">
                                    @Html.EditorFor(model => model.Project_DocNo, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.Project_DocNo, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="row form-group">
                                <label for="firstname" class="col-sm-12 col-md-6 col-xl-3 control-label">Developer Name<span class="symbol required"></span></label>
                                <div class="col-sm-12 col-md-6 col-xl-9">
                                    @Html.EditorFor(model => model.Developer_Name, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.Developer_Name, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="row form-group">
                                <label for="firstname" class="col-sm-12 col-md-6 col-xl-3 control-label">Contractor Name<span class="symbol required"></span></label>
                                <div class="col-sm-12 col-md-6 col-xl-9">
                                    @Html.EditorFor(model => model.Contractor_Name, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.Contractor_Name, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="row form-group">
                                <label for="firstname" class="col-sm-12 col-md-6 col-xl-3 control-label">Assessment Start Date<span class="symbol required"></span></label>
                                <div class="col-sm-12 col-md-6 col-xl-9">
                                    @Html.TextBoxFor(model => model.StartDate, new { @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.StartDate, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="row form-group">
                                <label for="firstname" class="col-sm-12 col-md-6 col-xl-3 control-label">Assessment End Date<span class="symbol required"></span></label>
                                <div class="col-sm-12 col-md-6 col-xl-9">
                                    @Html.TextBoxFor(model => model.EndDate, new { @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.EndDate, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="row form-group">
                                <label for="firstname" class="col-sm-12 col-md-6 col-xl-3 control-label">Assessors <span class="symbol required"></span></label>
                                <div class="col-sm-12 col-md-6 col-xl-9">
                                    <table>
                                        @foreach (var objAssessors in ViewBag.AssessorsList)
                                        {
                                            var checkBoxId = "emp_" + objAssessors.AssessorsID;
                                            var tdId = "td" + objAssessors.AssessorsID;
                                            var strChecked = "";
                                            if (Model.assessment_project_assessors_detail != null)
                                            {
                                                if (Model.assessment_project_assessors_detail.Where(a => a.AssessorsID == objAssessors.AssessorsID).FirstOrDefault() != null)
                                                {
                                                    strChecked = "checked";
                                                }
                                                else
                                                {
                                                    strChecked = "";
                                                }
                                            }
                                            if ((i % cells) == 0)
                                            {
                                                @:<tr>
                                                }
                                                <td width="350px" id="@tdId">
                                                    <input type="checkbox" id="@checkBoxId" @(strChecked == "" ? "" : "checked=\"checked\"" ) class="chkclass" value="@objAssessors.AssessorsID" />
                                                    @objAssessors.AssessorsName
                                                </td>
                                                if (i == (ViewBag.AssessorsList.Count - 1))
                                                {
                                                    while ((i % cells) != 0)
                                                    {
                                                        @:<td></td>
                                                        {
                                                            i++;
                                                        }
                                                    }
                                                }
                                                if ((i % cells) == (cells - 1)) // aka: last row cell
                                                {
                                                @:</tr>
                                            }
                                            {
                                                i++;
                                            }
                                        }
                                    </table>
                                </div>
                            </div>
                            <br />
                            <div class="row form-group">
                                <div class="col-md-12" style="font-weight: bold; text-decoration: underline;">
                                    Score Weightages &nbsp;
                                </div>
                                <div class="col-md-12">
                                    <span style="font-size:x-small;color:red">Determine whether the following modules are applicable in the calculation of the final score</span>
                                </div>
                            </div>
                            <div class="row form-group">
                                <label for="groupname" class="col-sm-12 col-md-6 col-xl-3 control-label">Type of Development<span class="symbol required"></span></label>
                                <div class="col-sm-12 col-md-6 col-xl-9">
                                    @Html.DropDownList("DevelopmentTypeID", null, htmlAttributes: new { @class = "form-control", @onchange = "TypeofDevelopment_change()" })
                                    @Html.ValidationMessageFor(model => model.DevelopmentTypeID, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="row form-group">
                                <div class="col-md-3">
                                    <label for="firstname" style="font-size:11px">Architectural Works Weightage</label>
                                    <div class="input-group mb-3">
                                        @Html.TextBoxFor(model => model.ArchitecturalWorksWeightage, new { @class = "form-control", @width = "50px" })
                                        <div class="input-group-append">
                                            <span class="input-group-text">%</span>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-3">
                                    <label for="firstname">M&E Works Weightage</label>
                                    <div class="input-group mb-3">
                                        @Html.TextBoxFor(model => model.MEWorksWeightage, new { @class = "form-control", @width = "50px" })
                                        <div class="input-group-append">
                                            <span class="input-group-text">%</span>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-2">
                                    <label for="firstname">BuildQAS<sup>TM</sup> Score</label>
                                    <div class="input-group mb-3">
                                        @Html.TextBoxFor(model => model.BuildQASScore, new { @class = "form-control", @width = "50px" })
                                        <div class="input-group-append">
                                            <span class="input-group-text">%</span>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-4">
                                    <label for="firstname">Minimum Compliance % Threshold</label>
                                    <div class="input-group mb-3">
                                        @Html.TextBoxFor(model => model.MinimumCompliancePercentageThreshold, new { @class = "form-control", @width = "50px" })
                                        <div class="input-group-append">
                                            <span class="input-group-text">%</span>
                                        </div>
                                    </div>
                                    <span style="font-size:x-small;color:red">Note: Any critera with score below this threshold will appear in the Main Non Compliance column of the Summary</span>
                                </div>
                            </div>
                            <br />
                            <div class="row form-group">
                                <div class="col-md-12" style="font-weight: bold; text-decoration: underline;">
                                    Other Applicable Modules
                                </div>
                                <div class="col-md-12" style="font-size:smaller;color:red">
                                    Determine whether the following modules are applicable in the calculation of the final score
                                </div>
                            </div>
                            <div class="row form-group">
                                <label for="groupname" class="col-sm-12 col-md-6 col-xl-3 control-label">External Wall</label>
                                <div class="col-sm-12 col-md-6 col-xl-9">
                                    <select id="ddlExternalWallApplicable">
                                        @if (Model.Is_ExternalWallApplicable == 1)
                                        {
                                            <option value="1" selected>Applicable</option>
                                            <option value="0">Not Applicable</option>
                                        }
                                        else
                                        {
                                            <option value="1">Applicable</option>
                                            <option value="0" selected>Not Applicable</option>
                                        }
                                    </select>
                                    @Html.ValidationMessageFor(model => model.Is_ExternalWallApplicable, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="row form-group">
                                <label for="groupname" class="col-sm-12 col-md-6 col-xl-3 control-label">External Works</label>
                                <div class="col-sm-12 col-md-6 col-xl-9">
                                    <select id="ddlExternalWorksApplicable">
                                        @if (Model.Is_ExternalWorksApplicable == 1)
                                        {
                                            <option value="1" selected>Applicable</option>
                                            <option value="0">Not Applicable</option>
                                        }
                                        else
                                        {
                                            <option value="1">Applicable</option>
                                            <option value="0" selected>Not Applicable</option>
                                        }
                                    </select>
                                    @Html.ValidationMessageFor(model => model.Is_ExternalWorksApplicable, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="row form-group">
                                <label for="groupname" class="col-sm-12 col-md-6 col-xl-3 control-label">Roof Construction</label>
                                <div class="col-sm-12 col-md-6 col-xl-9">
                                    <select id="ddlRoofApplicable">
                                        @if (Model.Is_RoofApplicable == 1)
                                        {
                                            <option value="1" selected>Applicable</option>
                                            <option value="0">Not Applicable</option>
                                        }
                                        else
                                        {
                                            <option value="1">Applicable</option>
                                            <option value="0" selected>Not Applicable</option>
                                        }
                                    </select>
                                    @Html.ValidationMessageFor(model => model.Is_RoofApplicable, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="row form-group">
                                <label for="groupname" class="col-sm-12 col-md-6 col-xl-3 control-label">Field Window WTT</label>
                                <div class="col-sm-12 col-md-6 col-xl-9">
                                    <select id="ddlFieldWindowWTTApplicable">
                                        @if (Model.Is_FieldWindowWTTApplicable == 1)
                                        {
                                            <option value="1" selected>Applicable</option>
                                            <option value="0">Not Applicable</option>
                                        }
                                        else
                                        {
                                            <option value="1">Applicable</option>
                                            <option value="0" selected>Not Applicable</option>
                                        }
                                    </select>
                                    @Html.ValidationMessageFor(model => model.Is_FieldWindowWTTApplicable, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="row form-group">
                                <label for="groupname" class="col-sm-12 col-md-6 col-xl-3 control-label">Wet Area WTT</label>
                                <div class="col-sm-12 col-md-6 col-xl-9">
                                    <select id="ddlWetAreaWTTApplicable">
                                        @if (Model.Is_WetAreaWTTApplicable == 1)
                                        {
                                            <option value="1" selected>Applicable</option>
                                            <option value="0">Not Applicable</option>
                                        }
                                        else
                                        {
                                            <option value="1">Applicable</option>
                                            <option value="0" selected>Not Applicable</option>
                                        }
                                    </select>
                                    @Html.ValidationMessageFor(model => model.Is_WetAreaWTTApplicable, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <br />
                            <div class="row form-group">
                                <div class="col-md-12" style="font-weight: bold; text-decoration: underline;">
                                    Field Window WTT
                                </div>
                            </div>
                            <div class="row form-group">
                                <label for="firstname" class="col-sm-12 col-md-6 col-xl-3 control-label">Contractor Name</label>
                                <div class="col-sm-12 col-md-6 col-xl-9">
                                    @Html.EditorFor(model => model.FieldWindowWTT_Contractor_Name, new { htmlAttributes = new { @class = "form-control" } })
                                </div>
                            </div>
                            <div class="row form-group">
                                <label for="firstname" class="col-sm-12 col-md-6 col-xl-3 control-label">Witness Name</label>
                                <div class="col-sm-12 col-md-6 col-xl-9">
                                    @Html.EditorFor(model => model.FieldWindowWTT_Witness_Name, new { htmlAttributes = new { @class = "form-control" } })
                                </div>
                            </div>
                            <br />
                            <div class="row form-group">
                                <div class="col-md-12" style="font-weight: bold; text-decoration: underline;">
                                    Wet Area WTT
                                </div>
                            </div>
                            <div class="row form-group">
                                <label for="firstname" class="col-sm-12 col-md-6 col-xl-3 control-label">Contractor Name</label>
                                <div class="col-sm-12 col-md-6 col-xl-9">
                                    @Html.EditorFor(model => model.WetAreaWTT_Contractor_Name, new { htmlAttributes = new { @class = "form-control" } })
                                </div>
                            </div>
                            <div class="row form-group">
                                <label for="firstname" class="col-sm-12 col-md-6 col-xl-3 control-label">Witness Name</label>
                                <div class="col-sm-12 col-md-6 col-xl-9">
                                    @Html.EditorFor(model => model.WetAreaWTT_Witness_Name, new { htmlAttributes = new { @class = "form-control" } })
                                </div>
                            </div>
                            <br />

                        </div>
                    </div>
                    <div class="form-footer">
                        <button type="button" id="btnCancelProject" class="btn btn-danger AssessmentProjectIndex"><i class="fa fa-times"></i> CANCEL</button>
                        <button type="button" id="btnSaveProject" onclick="ProjectCreate()" class="btn btn-success"><i class="fa fa-check-square-o"></i> SAVE</button>
                    </div>
                </div>
            </div>
        </div>
    </div><!--End Row-->
}
<!-- End Row-->


<script>
    function TypeofDevelopment_change() {
        $.ajax(
            {
                url: "/Assessment/JSGetTypeofDevelopmentInfo?Id=" + $('#DevelopmentTypeID').val(),
                type: "get",
                success: function (data) {
                    if (data.length > 0) {
                        $('#ArchitecturalWorksWeightage').val(data[0].ArchitecturalWorksWeightage);
                        $('#MEWorksWeightage').val(data[0].MEWorksWeightage);
                        $('#BuildQASScore').val(data[0].BuildQASScore);
                        $('#MinimumCompliancePercentageThreshold').val(data[0].MinimumCompliancePercentageThreshold);
                    }
                },
                error: function (xhr, status, error) {
                    var msg = "ERROR ";
                    if (xhr) {
                        msg = "readyState is " + xhr.readyState + ". ";
                    }
                    if (error) {
                        msg += error.name + ' - ' + error.message;
                    }
                }
            });
    }


    $().ready(function () {
        $("#ProjectCreateForm").validate({
            rules: {
                Project_Name: "required",
                Project_ID: "required",
                Developer_Name: "required",
                Contractor_Name: "required",
                StartDate: "required",
                EndDate: "required"
            },
            messages: {
                Project_Name: "Please enter your Project Name",
                Project_ID: "Please enter your Project ID",
                Developer_Name: "Please enter your Developer Name",
                Contractor_Name: "Please enter your Contractor Name",
                StartDate: "Please enter your Start Date",
                EndDate: "Please enter your End Date",
            }
        });
        TypeofDevelopment_change();
        $('#StartDate').datepicker({
            format: "dd/mm/yyyy",
            todayHighlight: 'TRUE',
            autoclose: true
        }).on('changeDate', function (ev) {
            $('#EndDate').datepicker('setStartDate', ev.date);
            $('#EndDate').datepicker('setDate', ev.date);
        });

        $('#EndDate').datepicker({
            format: "dd/mm/yyyy",
            todayHighlight: 'TRUE',
            autoclose: true
        });
    });

    function ProjectCreate() {
        ///Assessors
        var AssessorsSelection = []
        $.each($("input:checkbox[id^=emp_]"), function (i, v) {
            var idstring = v.id;
            var intID = idstring.split('_')[1]
            if (v.checked) {
                AssessorsSelection.push(intID)
            }

        });
        $('#Assessors').val(AssessorsSelection);

        $('#Is_ExternalWallApplicable').val($('#ddlExternalWallApplicable').val());
        $('#Is_ExternalWorksApplicable').val($('#ddlExternalWorksApplicable').val());
        $('#Is_RoofApplicable').val($('#ddlRoofApplicable').val());
        $('#Is_FieldWindowWTTApplicable').val($('#ddlFieldWindowWTTApplicable').val());
        $('#Is_WetAreaWTTApplicable').val($('#ddlWetAreaWTTApplicable').val());

        var ValidateMsg = "";
        if (AssessorsSelection.length == 0) {
            ValidateMsg = "Please select Assessors list";
        }
        if ($('#DevelopmentTypeID').val() == "0") {
            ValidateMsg += "<br/>Please enter Development Type";
        }
        
        if (ValidateMsg == "") {
            if (!$('#ProjectCreateForm').valid()) {
                return;
            }
            $.post("Assessment/ProjectCreate", $('#ProjectCreateForm').serialize(), function (data) {
                if (data.value == "OK") {
                    swal($('#Project_Name').val() + "- Project has been created!", {
                        icon: "success",
                    });
                    $.get("Assessment/ProjectIndex", function (data) {
                        $('#page-wrapper').html(data);
                    });
                }
                else if (data.value == "Failed") {
                    swal("Warning!", "Project creation failed!", "warning");
                }
                else {
                    swal("Warning!", data.value, "warning");
                }
            });
        }
        else {
            $('#ProjectCreateForm').valid()
            swal("Warning!", ValidateMsg, "warning");
            Lobibox.notify('error', {
                size: 'mini',
                position: 'top right',
                msg: ValidateMsg
            });
        }
    }
</script>