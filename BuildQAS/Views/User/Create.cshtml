@model BuildInspect.Models.ViewModel.UserViewModel
@{
    Layout = null;
}

<!-- Breadcrumb-->
<div class="row pt-2 pb-2">
    <div class="col-sm-9">
        <h4 class="page-title">User Creation</h4>
        <ol class="breadcrumb">
            <li class="breadcrumb-item"><a href="#" class="UserIndex">User List</a></li>
            <li class="breadcrumb-item active" aria-current="page">User Creation</li>
        </ol>
    </div>
</div>
<!-- End Breadcrumb-->

@using (Html.BeginForm(null, null, FormMethod.Post, new { id = "UserCreateForm", @class = "form-horizontal", enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    @Html.HiddenFor(model => model.EmpID)
    @Html.HiddenFor(model => model.SubCon_ID)
    @Html.HiddenFor(model => model.Assessor_ID)
    @Html.HiddenFor(model => model.Curr_Password)
    <div>&nbsp;</div>
    <div class="row">
        <div class="col-lg-12">
            <div class="card">
                <div class="card-body">
                    <h4 class="form-header text-uppercase">
                        <i class="fa fa-user-circle-o"></i>
                        User Info
                    </h4>
                    <div class="row">
                        <div class="col-md-4">
                            @Html.LabelFor(model => model.CompanyID, htmlAttributes: new { @class = "control-label required" })
                            @Html.ValidationMessageFor(model => model.CompanyID, "", new { @class = "text-danger" })
                            <div class="">
                                @Html.DropDownList("CompanyID", null, htmlAttributes: new { @class = "form-control" })
                            </div>
                        </div>
                        <div class="col-md-4">
                            @Html.LabelFor(model => model.GroupID, htmlAttributes: new { @class = "control-label required" })
                            @Html.ValidationMessageFor(model => model.GroupID, "", new { @class = "text-danger" })
                            <div class="">
                                @Html.DropDownList("GroupID", null, htmlAttributes: new { @class = "form-control" })
                            </div>
                        </div>
                        <div class="col-md-4">
                            @Html.LabelFor(model => model.DisplayName, htmlAttributes: new { @class = "control-label required" })
                            @Html.ValidationMessageFor(model => model.DisplayName, "", new { @class = "text-danger" })
                            <div class="">
                                @Html.EditorFor(model => model.DisplayName, new { htmlAttributes = new { @class = "form-control" } })
                            </div>
                        </div>
                    </div>
                    <br />
                    <div class="row">
                        <div class="col-md-4">
                            @Html.LabelFor(model => model.FirstName, htmlAttributes: new { @class = "control-label required" })
                            @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "text-danger" })
                            <div class="">
                                @Html.EditorFor(model => model.FirstName, new { htmlAttributes = new { @class = "form-control" } })
                            </div>
                        </div>
                        <div class="col-md-4">
                            @Html.LabelFor(model => model.LastName, htmlAttributes: new { @class = "control-label required" })
                            @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger" })
                            <div class="">
                                @Html.EditorFor(model => model.LastName, new { htmlAttributes = new { @class = "form-control" } })
                            </div>
                        </div>
                        <div class="col-md-4">
                            @Html.LabelFor(model => model.Designation, htmlAttributes: new { @class = "control-label" })
                            @Html.ValidationMessageFor(model => model.Designation, "", new { @class = "text-danger" })
                            <div class="">
                                @Html.EditorFor(model => model.Designation, new { htmlAttributes = new { @class = "form-control" } })
                            </div>
                        </div>

                    </div>
                    <br />
                    <div class="row">
                        <div class="col-md-4">
                            @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label required" })
                            @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                            <div class="">
                                @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control" } })
                            </div>
                        </div>
                        <div class="col-md-4">
                            @Html.LabelFor(model => model.UserName, htmlAttributes: new { @class = "control-label required" })
                            @Html.ValidationMessageFor(model => model.UserName, "", new { @class = "text-danger" })
                            <div class="">
                                @Html.EditorFor(model => model.UserName, new { htmlAttributes = new { @class = "form-control" } })
                            </div>
                        </div>
                        <div class="col-md-4">
                            @Html.LabelFor(model => model.Password, htmlAttributes: new { @class = "control-label required" })
                            <div class="input-group">
                                @Html.EditorFor(model => model.Password, new { htmlAttributes = new { @class = "form-control", @id = "UserPassword" } })
                                <div class="input-group-append">
                                    <button class="btn btn-dark" type="button" id="show_hide_password"><i class="fa fa-eye" aria-hidden="true" style="font-size:22px" id="ipasswordicon"></i></button>
                                </div>
                            </div><br />
                            @Html.ValidationMessageFor(model => model.Password, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-footer">
                        <button type="button" id="btnCancelUser" class="btn btn-danger UserIndex"><i class="fa fa-times"></i> CANCEL</button>
                        <button type="button" onclick="UserCreate()" id="btnSaveUser" class="btn btn-success"><i class="fa fa-check-square-o"></i> SAVE</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
<!--End Row-->
}
<!-- End Row-->


<script>
    $().ready(function () {
        $("#UserCreateForm").validate({
            rules: {
                DisplayName: "required",
                FirstName: "required",
                LastName: "required",
                Email: "required",
                UserName: "required",
                Password: "required",
            },
            messages: {
                DisplayName: "Please enter your Display Name",
                FirstName: "Please enter your First Name",
                LastName: "Please enter your Last Name",
                Email: "Please enter your Email",
                UserName: "Please enter your User Name",
                Password: "Please enter your Password"
            }
        });

        $("#show_hide_password").on('click', function (event) {
            event.preventDefault();
            if ($('#UserPassword').attr("type") == "text") {
                $('#UserPassword').attr('type', 'password');
                $('#ipasswordicon').addClass("fa-eye");
                $('#ipasswordicon').removeClass("fa-eye-slash");
            } else if ($('#UserPassword').attr("type") == "password") {
                $('#UserPassword').attr('type', 'text');
                $('#ipasswordicon').removeClass("fa-eye");
                $('#ipasswordicon').addClass("fa-eye-slash");
            }
        });
    });

    function UserCreate() {
        if (!$('#UserCreateForm').valid()) {
            return;
        }

        var UserCreateForm = new FormData(document.forms.namedItem("UserCreateForm"));

        $.ajax({
            url: '/User/Create',
            data: UserCreateForm,
            cache: false,
            enctype: 'multipart/form-data',
            processData: false,
            contentType: false,
            type: 'POST',
            success: function (data) {
                if (data.value == "OK") {
                    swal($('#UserName').val() + "- User has been created!", {
                        icon: "success",
                        timer: 360000,
                        html:true
                    });
                    Lobibox.notify('success', {
                        size: 'mini',
                        position: 'top right',
                        msg: $('#UserName').val() + "- User has been created!"
                    });
                    $.get("User/Index", function (data) {
                        $('#page-wrapper').html(data);
                    });
                }
                else if (data.value == "Failed") {
                    swal("Warning!", "User creation failed!", "warning");
                    Lobibox.notify('error', {
                        size: 'mini',
                        position: 'top right',
                        msg: "User creation failed!"
                    });
                }
                else {
                    swal("Warning!", data.value, "warning");
                    Lobibox.notify('error', {
                        size: 'mini',
                        position: 'top right',
                        msg: data.value
                    });
                }
            }
        });
    }
</script>

