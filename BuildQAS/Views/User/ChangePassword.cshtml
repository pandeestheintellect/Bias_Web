@model BuildInspect.Models.ChangePasswordViewModel
@{
    /**/

    Layout = null;
}

<!-- Breadcrumb-->
<div class="row pt-2 pb-2">
    <div class="col-sm-9">
        <h4 class="page-title">Change Password</h4>
        <ol class="breadcrumb">
            <li class="breadcrumb-item">Change Password</li>
        </ol>
    </div>
</div>
<!-- End Breadcrumb-->
@using (Html.BeginForm(null, null, FormMethod.Post, new { id = "ChangePasswordForm", @class = "form-horizontal" }))
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    <div>&nbsp;</div>
    <div class="row">
        <div class="col-lg-4">
            <div class="card">
                <div class="card-body">
                    <h4 class="form-header text-uppercase">
                        <i class="fa fa-key"></i>
                        Change Password
                    </h4>
                    <div class="row">
                        <div class="col-md-12">
                            @Html.LabelFor(m => m.OldPassword, new { @class = "control-label" })
                            <div class="input-group mb-3">
                                @Html.EditorFor(model => model.OldPassword, new { htmlAttributes = new { @class = "form-control", @id = "OldPassword" } })
                                <div class="input-group-append">
                                    <button class="btn btn-dark" type="button" id="show_hide_OldPassword"><i class="fa fa-eye" aria-hidden="true" style="font-size:22px" id="iOldPasswordicon"></i></button>
                                </div>
                            </div>
                            @Html.ValidationMessageFor(model => model.OldPassword, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-12">
                            @Html.LabelFor(m => m.NewPassword, new { @class = "control-label" })
                            <div class="input-group mb-3">
                                @Html.EditorFor(model => model.NewPassword, new { htmlAttributes = new { @class = "form-control", @id = "NewPassword" } })
                                <div class="input-group-append">
                                    <button class="btn btn-dark" type="button" id="show_hide_NewPassword"><i class="fa fa-eye" aria-hidden="true" style="font-size:22px" id="iNewPasswordicon"></i></button>
                                </div>
                            </div>
                            @Html.ValidationMessageFor(model => model.NewPassword, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-12">
                            @Html.LabelFor(m => m.ConfirmPassword, new { @class = "control-label" })
                            <div class="input-group mb-3">
                                @Html.EditorFor(model => model.ConfirmPassword, new { htmlAttributes = new { @class = "form-control", @id = "ConfirmPassword" } })
                                <div class="input-group-append">
                                    <button class="btn btn-dark" type="button" id="show_hide_ConfirmPassword"><i class="fa fa-eye" aria-hidden="true" style="font-size:22px" id="iConfirmPasswordicon"></i></button>
                                </div>
                            </div>
                            @Html.ValidationMessageFor(model => model.ConfirmPassword, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-footer">
                        <button type="button" onclick="ChangePassword()" id="btnChangePassword" class="btn btn-success"><i class="fa fa-check-square-o"></i> Change Password</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

<script>
    $().ready(function () {
        $("#ChangePasswordForm").validate({
            rules: {
                OldPassword: {
                    required: true,
                    minlength: 2
                },
                NewPassword: {
                    required: true
                },
                ConfirmPassword: {
                    required: true,
                    equalTo: "#NewPassword"
                }
            },
            messages: {
                OldPassword: {
                    required: "Enter old password",
                    minlength: jQuery.validator.format("Enter at least {0} characters")
                },
                NewPassword: {
                    required: "Enter new password",
                    minlength: jQuery.validator.format("Enter at least {0} characters")
                },
                ConfirmPassword: {
                    required: "Repeat your new password",
                    minlength: jQuery.validator.format("Enter at least {0} characters"),
                    equalTo: "Enter the same password as above"
                }
            }
        });

        $("#show_hide_OldPassword").on('click', function (event) {
            event.preventDefault();
            if ($('#OldPassword').attr("type") == "text") {
                $('#OldPassword').attr('type', 'password');
                $('#iOldPasswordicon').addClass("fa-eye");
                $('#iOldPasswordicon').removeClass("fa-eye-slash");
            } else if ($('#OldPassword').attr("type") == "password") {
                $('#OldPassword').attr('type', 'text');
                $('#iOldPasswordicon').removeClass("fa-eye");
                $('#iOldPasswordicon').addClass("fa-eye-slash");
            }
        });

        $("#show_hide_NewPassword").on('click', function (event) {
            event.preventDefault();
            if ($('#NewPassword').attr("type") == "text") {
                $('#NewPassword').attr('type', 'password');
                $('#iNewPasswordicon').addClass("fa-eye");
                $('#iNewPasswordicon').removeClass("fa-eye-slash");
            } else if ($('#NewPassword').attr("type") == "password") {
                $('#NewPassword').attr('type', 'text');
                $('#iNewPasswordicon').removeClass("fa-eye");
                $('#iNewPasswordicon').addClass("fa-eye-slash");
            }
        });

        $("#show_hide_ConfirmPassword").on('click', function (event) {
            event.preventDefault();
            if ($('#ConfirmPassword').attr("type") == "text") {
                $('#ConfirmPassword').attr('type', 'password');
                $('#iConfirmPasswordicon').addClass("fa-eye");
                $('#iConfirmPasswordicon').removeClass("fa-eye-slash");
            } else if ($('#ConfirmPassword').attr("type") == "password") {
                $('#ConfirmPassword').attr('type', 'text');
                $('#iConfirmPasswordicon').removeClass("fa-eye");
                $('#iConfirmPasswordicon').addClass("fa-eye-slash");
            }
        });
    });

    function ChangePassword() {
        if (!$('#ChangePasswordForm').valid()) {
            return;
        }

        var ChangePasswordForm = new FormData(document.forms.namedItem("ChangePasswordForm"));

        $.ajax({
            url: '/User/ChangePassword',
            data: ChangePasswordForm,
            cache: false,
            processData: false,
            contentType: false,
            type: 'POST',
            success: function (data) {
                if (data.value == "OK") {
                    swal("Your password has been changed successfully!", {
                        icon: "success",
                        timer: 360000
                    });
                    Lobibox.notify('success', {
                        size: 'mini',
                        position: 'top right',
                        msg:"Your password has been changed successfully!"
                    });
                    location.href = '/Login/SignOut';
                }
                else {
                    swal("Warning!", data.value, "warning");
                    Lobibox.notify('error', {
                        size: 'mini',
                        position: 'top right',
                        msg: data.value
                    });
                }
            }
        });
    }
</script>

